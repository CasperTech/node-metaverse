// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class InitiateDownloadMessage implements MessageBase
{
    name = 'InitiateDownload';
    messageFlags = MessageFlags.FrequencyLow;
    id = Message.InitiateDownload;

    AgentData: {
        AgentID: UUID;
    };
    FileData: {
        SimFilename: string;
        ViewerFilename: string;
    };

    getSize(): number
    {
        return (this.FileData['SimFilename'].length + 1 + this.FileData['ViewerFilename'].length + 1) + 16;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.AgentData['AgentID'].writeToBuffer(buf, pos);
        pos += 16;
        buf.writeUInt8(this.FileData['SimFilename'].length, pos++);
        buf.write(this.FileData['SimFilename'], pos);
        pos += this.FileData['SimFilename'].length;
        buf.writeUInt8(this.FileData['ViewerFilename'].length, pos++);
        buf.write(this.FileData['ViewerFilename'], pos);
        pos += this.FileData['ViewerFilename'].length;
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjAgentData: {
            AgentID: UUID
        } = {
            AgentID: UUID.zero()
        };
        newObjAgentData['AgentID'] = new UUID(buf, pos);
        pos += 16;
        this.AgentData = newObjAgentData;
        const newObjFileData: {
            SimFilename: string,
            ViewerFilename: string
        } = {
            SimFilename: '',
            ViewerFilename: ''
        };
        varLength = buf.readUInt8(pos++);
        newObjFileData['SimFilename'] = buf.toString('utf8', pos, pos + (varLength - 1));
        pos += varLength;
        varLength = buf.readUInt8(pos++);
        newObjFileData['ViewerFilename'] = buf.toString('utf8', pos, pos + (varLength - 1));
        pos += varLength;
        this.FileData = newObjFileData;
        return pos - startPos;
    }
}

