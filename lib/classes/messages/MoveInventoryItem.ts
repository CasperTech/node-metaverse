// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class MoveInventoryItemMessage implements MessageBase
{
    name = 'MoveInventoryItem';
    messageFlags = MessageFlags.Zerocoded | MessageFlags.FrequencyLow;
    id = Message.MoveInventoryItem;

    AgentData: {
        AgentID: UUID;
        SessionID: UUID;
        Stamp: boolean;
    };
    InventoryData: {
        ItemID: UUID;
        FolderID: UUID;
        NewName: Buffer;
    }[];

    getSize(): number
    {
        return ((this.calculateVarVarSize(this.InventoryData, 'NewName', 1) + 32) * this.InventoryData.length) + 34;
    }

    calculateVarVarSize(block: object[], paramName: string, extraPerVar: number): number
    {
        let size = 0;
        block.forEach((bl: any) =>
        {
            size += bl[paramName].length + extraPerVar;
        });
        return size;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.AgentData['AgentID'].writeToBuffer(buf, pos);
        pos += 16;
        this.AgentData['SessionID'].writeToBuffer(buf, pos);
        pos += 16;
        buf.writeUInt8((this.AgentData['Stamp']) ? 1 : 0, pos++);
        const count = this.InventoryData.length;
        buf.writeUInt8(this.InventoryData.length, pos++);
        for (let i = 0; i < count; i++)
        {
            this.InventoryData[i]['ItemID'].writeToBuffer(buf, pos);
            pos += 16;
            this.InventoryData[i]['FolderID'].writeToBuffer(buf, pos);
            pos += 16;
            buf.writeUInt8(this.InventoryData[i]['NewName'].length, pos++);
            this.InventoryData[i]['NewName'].copy(buf, pos);
            pos += this.InventoryData[i]['NewName'].length;
        }
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjAgentData: {
            AgentID: UUID,
            SessionID: UUID,
            Stamp: boolean
        } = {
            AgentID: UUID.zero(),
            SessionID: UUID.zero(),
            Stamp: false
        };
        newObjAgentData['AgentID'] = new UUID(buf, pos);
        pos += 16;
        newObjAgentData['SessionID'] = new UUID(buf, pos);
        pos += 16;
        newObjAgentData['Stamp'] = (buf.readUInt8(pos++) === 1);
        this.AgentData = newObjAgentData;
        const count = buf.readUInt8(pos++);
        this.InventoryData = [];
        for (let i = 0; i < count; i++)
        {
            const newObjInventoryData: {
                ItemID: UUID,
                FolderID: UUID,
                NewName: Buffer
            } = {
                ItemID: UUID.zero(),
                FolderID: UUID.zero(),
                NewName: Buffer.allocUnsafe(0)
            };
            newObjInventoryData['ItemID'] = new UUID(buf, pos);
            pos += 16;
            newObjInventoryData['FolderID'] = new UUID(buf, pos);
            pos += 16;
            varLength = buf.readUInt8(pos++);
            newObjInventoryData['NewName'] = buf.slice(pos, pos + varLength);
            pos += varLength;
            this.InventoryData.push(newObjInventoryData);
        }
        return pos - startPos;
    }
}

