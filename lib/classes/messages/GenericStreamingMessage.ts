// This file has been automatically generated by writeMessageClasses.js

import { MessageFlags } from '../../enums/MessageFlags';
import { MessageBase } from '../MessageBase';
import { Message } from '../../enums/Message';

export class GenericStreamingMessageMessage implements MessageBase
{
    name = 'GenericStreamingMessage';
    messageFlags = MessageFlags.Trusted | MessageFlags.FrequencyHigh;
    id = Message.GenericStreamingMessage;

    MethodData: {
        Method: number;
    };
    DataBlock: {
        Data: Buffer;
    };

    getSize(): number
    {
        return (this.DataBlock['Data'].length + 2) + 2;
    }

    // @ts-ignore
    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        buf.writeUInt16LE(this.MethodData['Method'], pos);
        pos += 2;
        buf.writeUInt16LE(this.DataBlock['Data'].length, pos);
        pos += 2;
        this.DataBlock['Data'].copy(buf, pos);
        pos += this.DataBlock['Data'].length;
        return pos - startPos;
    }

    // @ts-ignore
    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjMethodData: {
            Method: number
        } = {
            Method: 0
        };
        newObjMethodData['Method'] = buf.readUInt16LE(pos);
        pos += 2;
        this.MethodData = newObjMethodData;
        const newObjDataBlock: {
            Data: Buffer
        } = {
            Data: Buffer.allocUnsafe(0)
        };
        varLength = buf.readUInt16LE(pos);
        pos += 2;
        newObjDataBlock['Data'] = buf.slice(pos, pos + varLength);
        pos += varLength;
        this.DataBlock = newObjDataBlock;
        return pos - startPos;
    }
}

