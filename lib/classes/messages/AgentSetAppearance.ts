// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {Vector3} from '../Vector3';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class AgentSetAppearanceMessage implements MessageBase
{
    name = 'AgentSetAppearance';
    messageFlags = MessageFlags.Zerocoded | MessageFlags.FrequencyLow;
    id = Message.AgentSetAppearance;

    AgentData: {
        AgentID: UUID;
        SessionID: UUID;
        SerialNum: number;
        Size: Vector3;
    };
    WearableData: {
        CacheID: UUID;
        TextureIndex: number;
    }[];
    ObjectData: {
        TextureEntry: Buffer;
    };
    VisualParam: {
        ParamValue: number;
    }[];

    getSize(): number
    {
        return ((17) * this.WearableData.length) + (this.ObjectData['TextureEntry'].length + 2) + ((1) * this.VisualParam.length) + 50;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.AgentData['AgentID'].writeToBuffer(buf, pos);
        pos += 16;
        this.AgentData['SessionID'].writeToBuffer(buf, pos);
        pos += 16;
        buf.writeUInt32LE(this.AgentData['SerialNum'], pos);
        pos += 4;
        this.AgentData['Size'].writeToBuffer(buf, pos, false);
        pos += 12;
        let count = this.WearableData.length;
        buf.writeUInt8(this.WearableData.length, pos++);
        for (let i = 0; i < count; i++)
        {
            this.WearableData[i]['CacheID'].writeToBuffer(buf, pos);
            pos += 16;
            buf.writeUInt8(this.WearableData[i]['TextureIndex'], pos++);
        }
        buf.writeUInt16LE(this.ObjectData['TextureEntry'].length, pos);
        pos += 2;
        this.ObjectData['TextureEntry'].copy(buf, pos);
        pos += this.ObjectData['TextureEntry'].length;
        count = this.VisualParam.length;
        buf.writeUInt8(this.VisualParam.length, pos++);
        for (let i = 0; i < count; i++)
        {
            buf.writeUInt8(this.VisualParam[i]['ParamValue'], pos++);
        }
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjAgentData: {
            AgentID: UUID,
            SessionID: UUID,
            SerialNum: number,
            Size: Vector3
        } = {
            AgentID: UUID.zero(),
            SessionID: UUID.zero(),
            SerialNum: 0,
            Size: Vector3.getZero()
        };
        newObjAgentData['AgentID'] = new UUID(buf, pos);
        pos += 16;
        newObjAgentData['SessionID'] = new UUID(buf, pos);
        pos += 16;
        newObjAgentData['SerialNum'] = buf.readUInt32LE(pos);
        pos += 4;
        newObjAgentData['Size'] = new Vector3(buf, pos, false);
        pos += 12;
        this.AgentData = newObjAgentData;
        let count = buf.readUInt8(pos++);
        this.WearableData = [];
        for (let i = 0; i < count; i++)
        {
            const newObjWearableData: {
                CacheID: UUID,
                TextureIndex: number
            } = {
                CacheID: UUID.zero(),
                TextureIndex: 0
            };
            newObjWearableData['CacheID'] = new UUID(buf, pos);
            pos += 16;
            newObjWearableData['TextureIndex'] = buf.readUInt8(pos++);
            this.WearableData.push(newObjWearableData);
        }
        const newObjObjectData: {
            TextureEntry: Buffer
        } = {
            TextureEntry: Buffer.allocUnsafe(0)
        };
        varLength = buf.readUInt16LE(pos);
        pos += 2;
        newObjObjectData['TextureEntry'] = buf.slice(pos, pos + (varLength - 1));
        pos += varLength;
        this.ObjectData = newObjObjectData;
        count = buf.readUInt8(pos++);
        this.VisualParam = [];
        for (let i = 0; i < count; i++)
        {
            const newObjVisualParam: {
                ParamValue: number
            } = {
                ParamValue: 0
            };
            newObjVisualParam['ParamValue'] = buf.readUInt8(pos++);
            this.VisualParam.push(newObjVisualParam);
        }
        return pos - startPos;
    }
}

