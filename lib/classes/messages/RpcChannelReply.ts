// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class RpcChannelReplyMessage implements MessageBase
{
    name = 'RpcChannelReply';
    messageFlags = MessageFlags.Trusted | MessageFlags.FrequencyLow;
    id = Message.RpcChannelReply;

    DataBlock: {
        TaskID: UUID;
        ItemID: UUID;
        ChannelID: UUID;
    };

    getSize(): number
    {
        return 48;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.DataBlock['TaskID'].writeToBuffer(buf, pos);
        pos += 16;
        this.DataBlock['ItemID'].writeToBuffer(buf, pos);
        pos += 16;
        this.DataBlock['ChannelID'].writeToBuffer(buf, pos);
        pos += 16;
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjDataBlock: {
            TaskID: UUID,
            ItemID: UUID,
            ChannelID: UUID
        } = {
            TaskID: UUID.zero(),
            ItemID: UUID.zero(),
            ChannelID: UUID.zero()
        };
        newObjDataBlock['TaskID'] = new UUID(buf, pos);
        pos += 16;
        newObjDataBlock['ItemID'] = new UUID(buf, pos);
        pos += 16;
        newObjDataBlock['ChannelID'] = new UUID(buf, pos);
        pos += 16;
        this.DataBlock = newObjDataBlock;
        return pos - startPos;
    }
}

