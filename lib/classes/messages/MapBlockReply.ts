// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class MapBlockReplyMessage implements MessageBase
{
    name = 'MapBlockReply';
    messageFlags = MessageFlags.Trusted | MessageFlags.FrequencyLow;
    id = Message.MapBlockReply;

    AgentData: {
        AgentID: UUID;
        Flags: number;
    };
    Data: {
        X: number;
        Y: number;
        Name: Buffer;
        Access: number;
        RegionFlags: number;
        WaterHeight: number;
        Agents: number;
        MapImageID: UUID;
    }[];

    getSize(): number
    {
        return ((this.calculateVarVarSize(this.Data, 'Name', 1) + 27) * this.Data.length) + 21;
    }

    calculateVarVarSize(block: object[], paramName: string, extraPerVar: number): number
    {
        let size = 0;
        block.forEach((bl: any) =>
        {
            size += bl[paramName].length + extraPerVar;
        });
        return size;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.AgentData['AgentID'].writeToBuffer(buf, pos);
        pos += 16;
        buf.writeUInt32LE(this.AgentData['Flags'], pos);
        pos += 4;
        const count = this.Data.length;
        buf.writeUInt8(this.Data.length, pos++);
        for (let i = 0; i < count; i++)
        {
            buf.writeUInt16LE(this.Data[i]['X'], pos);
            pos += 2;
            buf.writeUInt16LE(this.Data[i]['Y'], pos);
            pos += 2;
            buf.writeUInt8(this.Data[i]['Name'].length, pos++);
            this.Data[i]['Name'].copy(buf, pos);
            pos += this.Data[i]['Name'].length;
            buf.writeUInt8(this.Data[i]['Access'], pos++);
            buf.writeUInt32LE(this.Data[i]['RegionFlags'], pos);
            pos += 4;
            buf.writeUInt8(this.Data[i]['WaterHeight'], pos++);
            buf.writeUInt8(this.Data[i]['Agents'], pos++);
            this.Data[i]['MapImageID'].writeToBuffer(buf, pos);
            pos += 16;
        }
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjAgentData: {
            AgentID: UUID,
            Flags: number
        } = {
            AgentID: UUID.zero(),
            Flags: 0
        };
        newObjAgentData['AgentID'] = new UUID(buf, pos);
        pos += 16;
        newObjAgentData['Flags'] = buf.readUInt32LE(pos);
        pos += 4;
        this.AgentData = newObjAgentData;
        const count = buf.readUInt8(pos++);
        this.Data = [];
        for (let i = 0; i < count; i++)
        {
            const newObjData: {
                X: number,
                Y: number,
                Name: Buffer,
                Access: number,
                RegionFlags: number,
                WaterHeight: number,
                Agents: number,
                MapImageID: UUID
            } = {
                X: 0,
                Y: 0,
                Name: Buffer.allocUnsafe(0),
                Access: 0,
                RegionFlags: 0,
                WaterHeight: 0,
                Agents: 0,
                MapImageID: UUID.zero()
            };
            newObjData['X'] = buf.readUInt16LE(pos);
            pos += 2;
            newObjData['Y'] = buf.readUInt16LE(pos);
            pos += 2;
            varLength = buf.readUInt8(pos++);
            newObjData['Name'] = buf.slice(pos, pos + (varLength - 1));
            pos += varLength;
            newObjData['Access'] = buf.readUInt8(pos++);
            newObjData['RegionFlags'] = buf.readUInt32LE(pos);
            pos += 4;
            newObjData['WaterHeight'] = buf.readUInt8(pos++);
            newObjData['Agents'] = buf.readUInt8(pos++);
            newObjData['MapImageID'] = new UUID(buf, pos);
            pos += 16;
            this.Data.push(newObjData);
        }
        return pos - startPos;
    }
}

