// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class AssetUploadCompleteMessage implements MessageBase
{
    name = 'AssetUploadComplete';
    messageFlags = MessageFlags.FrequencyLow;
    id = Message.AssetUploadComplete;

    AssetBlock: {
        UUID: UUID;
        Type: number;
        Success: boolean;
    };

    getSize(): number
    {
        return 18;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.AssetBlock['UUID'].writeToBuffer(buf, pos);
        pos += 16;
        buf.writeInt8(this.AssetBlock['Type'], pos++);
        buf.writeUInt8((this.AssetBlock['Success']) ? 1 : 0, pos++);
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjAssetBlock: {
            UUID: UUID,
            Type: number,
            Success: boolean
        } = {
            UUID: UUID.zero(),
            Type: 0,
            Success: false
        };
        newObjAssetBlock['UUID'] = new UUID(buf, pos);
        pos += 16;
        newObjAssetBlock['Type'] = buf.readInt8(pos++);
        newObjAssetBlock['Success'] = (buf.readUInt8(pos++) === 1);
        this.AssetBlock = newObjAssetBlock;
        return pos - startPos;
    }
}

