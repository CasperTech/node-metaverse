// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {IPAddress} from '../IPAddress';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class KickUserMessage implements MessageBase
{
    name = 'KickUser';
    messageFlags = MessageFlags.Trusted | MessageFlags.FrequencyLow;
    id = Message.KickUser;

    TargetBlock: {
        TargetIP: IPAddress;
        TargetPort: number;
    };
    UserInfo: {
        AgentID: UUID;
        SessionID: UUID;
        Reason: Buffer;
    };

    getSize(): number
    {
        return (this.UserInfo['Reason'].length + 2) + 38;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.TargetBlock['TargetIP'].writeToBuffer(buf, pos);
        pos += 4;
        buf.writeUInt16LE(this.TargetBlock['TargetPort'], pos);
        pos += 2;
        this.UserInfo['AgentID'].writeToBuffer(buf, pos);
        pos += 16;
        this.UserInfo['SessionID'].writeToBuffer(buf, pos);
        pos += 16;
        buf.writeUInt16LE(this.UserInfo['Reason'].length, pos);
        pos += 2;
        this.UserInfo['Reason'].copy(buf, pos);
        pos += this.UserInfo['Reason'].length;
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjTargetBlock: {
            TargetIP: IPAddress,
            TargetPort: number
        } = {
            TargetIP: IPAddress.zero(),
            TargetPort: 0
        };
        newObjTargetBlock['TargetIP'] = new IPAddress(buf, pos);
        pos += 4;
        newObjTargetBlock['TargetPort'] = buf.readUInt16LE(pos);
        pos += 2;
        this.TargetBlock = newObjTargetBlock;
        const newObjUserInfo: {
            AgentID: UUID,
            SessionID: UUID,
            Reason: Buffer
        } = {
            AgentID: UUID.zero(),
            SessionID: UUID.zero(),
            Reason: Buffer.allocUnsafe(0)
        };
        newObjUserInfo['AgentID'] = new UUID(buf, pos);
        pos += 16;
        newObjUserInfo['SessionID'] = new UUID(buf, pos);
        pos += 16;
        varLength = buf.readUInt16LE(pos);
        pos += 2;
        newObjUserInfo['Reason'] = buf.slice(pos, pos + varLength);
        pos += varLength;
        this.UserInfo = newObjUserInfo;
        return pos - startPos;
    }
}

