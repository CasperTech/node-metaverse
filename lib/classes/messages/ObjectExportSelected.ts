// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class ObjectExportSelectedMessage implements MessageBase
{
    name = 'ObjectExportSelected';
    messageFlags = MessageFlags.Zerocoded | MessageFlags.FrequencyLow;
    id = Message.ObjectExportSelected;

    AgentData: {
        AgentID: UUID;
        RequestID: UUID;
        VolumeDetail: number;
    };
    ObjectData: {
        ObjectID: UUID;
    }[];

    getSize(): number
    {
        return ((16) * this.ObjectData.length) + 35;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.AgentData['AgentID'].writeToBuffer(buf, pos);
        pos += 16;
        this.AgentData['RequestID'].writeToBuffer(buf, pos);
        pos += 16;
        buf.writeInt16LE(this.AgentData['VolumeDetail'], pos);
        pos += 2;
        const count = this.ObjectData.length;
        buf.writeUInt8(this.ObjectData.length, pos++);
        for (let i = 0; i < count; i++)
        {
            this.ObjectData[i]['ObjectID'].writeToBuffer(buf, pos);
            pos += 16;
        }
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjAgentData: {
            AgentID: UUID,
            RequestID: UUID,
            VolumeDetail: number
        } = {
            AgentID: UUID.zero(),
            RequestID: UUID.zero(),
            VolumeDetail: 0
        };
        newObjAgentData['AgentID'] = new UUID(buf, pos);
        pos += 16;
        newObjAgentData['RequestID'] = new UUID(buf, pos);
        pos += 16;
        newObjAgentData['VolumeDetail'] = buf.readInt16LE(pos);
        pos += 2;
        this.AgentData = newObjAgentData;
        const count = buf.readUInt8(pos++);
        this.ObjectData = [];
        for (let i = 0; i < count; i++)
        {
            const newObjObjectData: {
                ObjectID: UUID
            } = {
                ObjectID: UUID.zero()
            };
            newObjObjectData['ObjectID'] = new UUID(buf, pos);
            pos += 16;
            this.ObjectData.push(newObjObjectData);
        }
        return pos - startPos;
    }
}

