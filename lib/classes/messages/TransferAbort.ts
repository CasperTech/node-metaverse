// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class TransferAbortMessage implements MessageBase
{
    name = 'TransferAbort';
    messageFlags = MessageFlags.Zerocoded | MessageFlags.FrequencyLow;
    id = Message.TransferAbort;

    TransferInfo: {
        TransferID: UUID;
        ChannelType: number;
    };

    getSize(): number
    {
        return 20;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.TransferInfo['TransferID'].writeToBuffer(buf, pos);
        pos += 16;
        buf.writeInt32LE(this.TransferInfo['ChannelType'], pos);
        pos += 4;
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjTransferInfo: {
            TransferID: UUID,
            ChannelType: number
        } = {
            TransferID: UUID.zero(),
            ChannelType: 0
        };
        newObjTransferInfo['TransferID'] = new UUID(buf, pos);
        pos += 16;
        newObjTransferInfo['ChannelType'] = buf.readInt32LE(pos);
        pos += 4;
        this.TransferInfo = newObjTransferInfo;
        return pos - startPos;
    }
}

