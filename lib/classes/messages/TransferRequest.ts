// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class TransferRequestMessage implements MessageBase
{
    name = 'TransferRequest';
    messageFlags = MessageFlags.Zerocoded | MessageFlags.FrequencyLow;
    id = Message.TransferRequest;

    TransferInfo: {
        TransferID: UUID;
        ChannelType: number;
        SourceType: number;
        Priority: number;
        Params: Buffer;
    };

    getSize(): number
    {
        return (this.TransferInfo['Params'].length + 2) + 28;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.TransferInfo['TransferID'].writeToBuffer(buf, pos);
        pos += 16;
        buf.writeInt32LE(this.TransferInfo['ChannelType'], pos);
        pos += 4;
        buf.writeInt32LE(this.TransferInfo['SourceType'], pos);
        pos += 4;
        buf.writeFloatLE(this.TransferInfo['Priority'], pos);
        pos += 4;
        buf.writeUInt16LE(this.TransferInfo['Params'].length, pos);
        pos += 2;
        this.TransferInfo['Params'].copy(buf, pos);
        pos += this.TransferInfo['Params'].length;
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjTransferInfo: {
            TransferID: UUID,
            ChannelType: number,
            SourceType: number,
            Priority: number,
            Params: Buffer
        } = {
            TransferID: UUID.zero(),
            ChannelType: 0,
            SourceType: 0,
            Priority: 0,
            Params: Buffer.allocUnsafe(0)
        };
        newObjTransferInfo['TransferID'] = new UUID(buf, pos);
        pos += 16;
        newObjTransferInfo['ChannelType'] = buf.readInt32LE(pos);
        pos += 4;
        newObjTransferInfo['SourceType'] = buf.readInt32LE(pos);
        pos += 4;
        newObjTransferInfo['Priority'] = buf.readFloatLE(pos);
        pos += 4;
        varLength = buf.readUInt16LE(pos);
        pos += 2;
        newObjTransferInfo['Params'] = buf.slice(pos, pos + (varLength - 1));
        pos += varLength;
        this.TransferInfo = newObjTransferInfo;
        return pos - startPos;
    }
}

