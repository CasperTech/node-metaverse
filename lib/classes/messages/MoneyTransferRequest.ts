// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class MoneyTransferRequestMessage implements MessageBase
{
    name = 'MoneyTransferRequest';
    messageFlags = MessageFlags.Zerocoded | MessageFlags.FrequencyLow;
    id = Message.MoneyTransferRequest;

    AgentData: {
        AgentID: UUID;
        SessionID: UUID;
    };
    MoneyData: {
        SourceID: UUID;
        DestID: UUID;
        Flags: number;
        Amount: number;
        AggregatePermNextOwner: number;
        AggregatePermInventory: number;
        TransactionType: number;
        Description: Buffer;
    };

    getSize(): number
    {
        return (this.MoneyData['Description'].length + 1) + 75;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.AgentData['AgentID'].writeToBuffer(buf, pos);
        pos += 16;
        this.AgentData['SessionID'].writeToBuffer(buf, pos);
        pos += 16;
        this.MoneyData['SourceID'].writeToBuffer(buf, pos);
        pos += 16;
        this.MoneyData['DestID'].writeToBuffer(buf, pos);
        pos += 16;
        buf.writeUInt8(this.MoneyData['Flags'], pos++);
        buf.writeInt32LE(this.MoneyData['Amount'], pos);
        pos += 4;
        buf.writeUInt8(this.MoneyData['AggregatePermNextOwner'], pos++);
        buf.writeUInt8(this.MoneyData['AggregatePermInventory'], pos++);
        buf.writeInt32LE(this.MoneyData['TransactionType'], pos);
        pos += 4;
        buf.writeUInt8(this.MoneyData['Description'].length, pos++);
        this.MoneyData['Description'].copy(buf, pos);
        pos += this.MoneyData['Description'].length;
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjAgentData: {
            AgentID: UUID,
            SessionID: UUID
        } = {
            AgentID: UUID.zero(),
            SessionID: UUID.zero()
        };
        newObjAgentData['AgentID'] = new UUID(buf, pos);
        pos += 16;
        newObjAgentData['SessionID'] = new UUID(buf, pos);
        pos += 16;
        this.AgentData = newObjAgentData;
        const newObjMoneyData: {
            SourceID: UUID,
            DestID: UUID,
            Flags: number,
            Amount: number,
            AggregatePermNextOwner: number,
            AggregatePermInventory: number,
            TransactionType: number,
            Description: Buffer
        } = {
            SourceID: UUID.zero(),
            DestID: UUID.zero(),
            Flags: 0,
            Amount: 0,
            AggregatePermNextOwner: 0,
            AggregatePermInventory: 0,
            TransactionType: 0,
            Description: Buffer.allocUnsafe(0)
        };
        newObjMoneyData['SourceID'] = new UUID(buf, pos);
        pos += 16;
        newObjMoneyData['DestID'] = new UUID(buf, pos);
        pos += 16;
        newObjMoneyData['Flags'] = buf.readUInt8(pos++);
        newObjMoneyData['Amount'] = buf.readInt32LE(pos);
        pos += 4;
        newObjMoneyData['AggregatePermNextOwner'] = buf.readUInt8(pos++);
        newObjMoneyData['AggregatePermInventory'] = buf.readUInt8(pos++);
        newObjMoneyData['TransactionType'] = buf.readInt32LE(pos);
        pos += 4;
        varLength = buf.readUInt8(pos++);
        newObjMoneyData['Description'] = buf.slice(pos, pos + (varLength - 1));
        pos += varLength;
        this.MoneyData = newObjMoneyData;
        return pos - startPos;
    }
}

