// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class ObjectExtraParamsMessage implements MessageBase
{
    name = 'ObjectExtraParams';
    messageFlags = MessageFlags.Zerocoded | MessageFlags.FrequencyLow;
    id = Message.ObjectExtraParams;

    AgentData: {
        AgentID: UUID;
        SessionID: UUID;
    };
    ObjectData: {
        ObjectLocalID: number;
        ParamType: number;
        ParamInUse: boolean;
        ParamSize: number;
        ParamData: string;
    }[];

    getSize(): number
    {
        return ((this.calculateVarVarSize(this.ObjectData, 'ParamData', 1) + 11) * this.ObjectData.length) + 33;
    }

    calculateVarVarSize(block: object[], paramName: string, extraPerVar: number): number
    {
        let size = 0;
        block.forEach((bl: any) =>
        {
            size += bl[paramName].length + extraPerVar;
        });
        return size;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.AgentData['AgentID'].writeToBuffer(buf, pos);
        pos += 16;
        this.AgentData['SessionID'].writeToBuffer(buf, pos);
        pos += 16;
        const count = this.ObjectData.length;
        buf.writeUInt8(this.ObjectData.length, pos++);
        for (let i = 0; i < count; i++)
        {
            buf.writeUInt32LE(this.ObjectData[i]['ObjectLocalID'], pos);
            pos += 4;
            buf.writeUInt16LE(this.ObjectData[i]['ParamType'], pos);
            pos += 2;
            buf.writeUInt8((this.ObjectData[i]['ParamInUse']) ? 1 : 0, pos++);
            buf.writeUInt32LE(this.ObjectData[i]['ParamSize'], pos);
            pos += 4;
            buf.writeUInt8(this.ObjectData[i]['ParamData'].length, pos++);
            buf.write(this.ObjectData[i]['ParamData'], pos);
            pos += this.ObjectData[i]['ParamData'].length;
        }
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjAgentData: {
            AgentID: UUID,
            SessionID: UUID
        } = {
            AgentID: UUID.zero(),
            SessionID: UUID.zero()
        };
        newObjAgentData['AgentID'] = new UUID(buf, pos);
        pos += 16;
        newObjAgentData['SessionID'] = new UUID(buf, pos);
        pos += 16;
        this.AgentData = newObjAgentData;
        const count = buf.readUInt8(pos++);
        this.ObjectData = [];
        for (let i = 0; i < count; i++)
        {
            const newObjObjectData: {
                ObjectLocalID: number,
                ParamType: number,
                ParamInUse: boolean,
                ParamSize: number,
                ParamData: string
            } = {
                ObjectLocalID: 0,
                ParamType: 0,
                ParamInUse: false,
                ParamSize: 0,
                ParamData: ''
            };
            newObjObjectData['ObjectLocalID'] = buf.readUInt32LE(pos);
            pos += 4;
            newObjObjectData['ParamType'] = buf.readUInt16LE(pos);
            pos += 2;
            newObjObjectData['ParamInUse'] = (buf.readUInt8(pos++) === 1);
            newObjObjectData['ParamSize'] = buf.readUInt32LE(pos);
            pos += 4;
            varLength = buf.readUInt8(pos++);
            newObjObjectData['ParamData'] = buf.toString('utf8', pos, pos + (varLength - 1));
            pos += varLength;
            this.ObjectData.push(newObjObjectData);
        }
        return pos - startPos;
    }
}

