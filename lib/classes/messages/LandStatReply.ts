// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class LandStatReplyMessage implements MessageBase
{
    name = 'LandStatReply';
    messageFlags = MessageFlags.Trusted | MessageFlags.Deprecated | MessageFlags.FrequencyLow;
    id = Message.LandStatReply;

    RequestData: {
        ReportType: number;
        RequestFlags: number;
        TotalObjectCount: number;
    };
    ReportData: {
        TaskLocalID: number;
        TaskID: UUID;
        LocationX: number;
        LocationY: number;
        LocationZ: number;
        Score: number;
        TaskName: string;
        OwnerName: string;
    }[];

    getSize(): number
    {
        return ((this.calculateVarVarSize(this.ReportData, 'TaskName', 1) + this.calculateVarVarSize(this.ReportData, 'OwnerName', 1) + 36) * this.ReportData.length) + 13;
    }

    calculateVarVarSize(block: object[], paramName: string, extraPerVar: number): number
    {
        let size = 0;
        block.forEach((bl: any) =>
        {
            size += bl[paramName].length + extraPerVar;
        });
        return size;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        buf.writeUInt32LE(this.RequestData['ReportType'], pos);
        pos += 4;
        buf.writeUInt32LE(this.RequestData['RequestFlags'], pos);
        pos += 4;
        buf.writeUInt32LE(this.RequestData['TotalObjectCount'], pos);
        pos += 4;
        const count = this.ReportData.length;
        buf.writeUInt8(this.ReportData.length, pos++);
        for (let i = 0; i < count; i++)
        {
            buf.writeUInt32LE(this.ReportData[i]['TaskLocalID'], pos);
            pos += 4;
            this.ReportData[i]['TaskID'].writeToBuffer(buf, pos);
            pos += 16;
            buf.writeFloatLE(this.ReportData[i]['LocationX'], pos);
            pos += 4;
            buf.writeFloatLE(this.ReportData[i]['LocationY'], pos);
            pos += 4;
            buf.writeFloatLE(this.ReportData[i]['LocationZ'], pos);
            pos += 4;
            buf.writeFloatLE(this.ReportData[i]['Score'], pos);
            pos += 4;
            buf.writeUInt8(this.ReportData[i]['TaskName'].length, pos++);
            buf.write(this.ReportData[i]['TaskName'], pos);
            pos += this.ReportData[i]['TaskName'].length;
            buf.writeUInt8(this.ReportData[i]['OwnerName'].length, pos++);
            buf.write(this.ReportData[i]['OwnerName'], pos);
            pos += this.ReportData[i]['OwnerName'].length;
        }
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjRequestData: {
            ReportType: number,
            RequestFlags: number,
            TotalObjectCount: number
        } = {
            ReportType: 0,
            RequestFlags: 0,
            TotalObjectCount: 0
        };
        newObjRequestData['ReportType'] = buf.readUInt32LE(pos);
        pos += 4;
        newObjRequestData['RequestFlags'] = buf.readUInt32LE(pos);
        pos += 4;
        newObjRequestData['TotalObjectCount'] = buf.readUInt32LE(pos);
        pos += 4;
        this.RequestData = newObjRequestData;
        const count = buf.readUInt8(pos++);
        this.ReportData = [];
        for (let i = 0; i < count; i++)
        {
            const newObjReportData: {
                TaskLocalID: number,
                TaskID: UUID,
                LocationX: number,
                LocationY: number,
                LocationZ: number,
                Score: number,
                TaskName: string,
                OwnerName: string
            } = {
                TaskLocalID: 0,
                TaskID: UUID.zero(),
                LocationX: 0,
                LocationY: 0,
                LocationZ: 0,
                Score: 0,
                TaskName: '',
                OwnerName: ''
            };
            newObjReportData['TaskLocalID'] = buf.readUInt32LE(pos);
            pos += 4;
            newObjReportData['TaskID'] = new UUID(buf, pos);
            pos += 16;
            newObjReportData['LocationX'] = buf.readFloatLE(pos);
            pos += 4;
            newObjReportData['LocationY'] = buf.readFloatLE(pos);
            pos += 4;
            newObjReportData['LocationZ'] = buf.readFloatLE(pos);
            pos += 4;
            newObjReportData['Score'] = buf.readFloatLE(pos);
            pos += 4;
            varLength = buf.readUInt8(pos++);
            newObjReportData['TaskName'] = buf.toString('utf8', pos, pos + (varLength - 1));
            pos += varLength;
            varLength = buf.readUInt8(pos++);
            newObjReportData['OwnerName'] = buf.toString('utf8', pos, pos + (varLength - 1));
            pos += varLength;
            this.ReportData.push(newObjReportData);
        }
        return pos - startPos;
    }
}

