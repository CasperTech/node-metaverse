// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {Vector3} from '../Vector3';
import Long = require('long');
import {Quaternion} from '../Quaternion';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class ScriptSensorRequestMessage implements MessageBase
{
    name = 'ScriptSensorRequest';
    messageFlags = MessageFlags.Trusted | MessageFlags.Zerocoded | MessageFlags.FrequencyLow;
    id = Message.ScriptSensorRequest;

    Requester: {
        SourceID: UUID;
        RequestID: UUID;
        SearchID: UUID;
        SearchPos: Vector3;
        SearchDir: Quaternion;
        SearchName: Buffer;
        Type: number;
        Range: number;
        Arc: number;
        RegionHandle: Long;
        SearchRegions: number;
    };

    getSize(): number
    {
        return (this.Requester['SearchName'].length + 1) + 93;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.Requester['SourceID'].writeToBuffer(buf, pos);
        pos += 16;
        this.Requester['RequestID'].writeToBuffer(buf, pos);
        pos += 16;
        this.Requester['SearchID'].writeToBuffer(buf, pos);
        pos += 16;
        this.Requester['SearchPos'].writeToBuffer(buf, pos, false);
        pos += 12;
        this.Requester['SearchDir'].writeToBuffer(buf, pos);
        pos += 12;
        buf.writeUInt8(this.Requester['SearchName'].length, pos++);
        this.Requester['SearchName'].copy(buf, pos);
        pos += this.Requester['SearchName'].length;
        buf.writeInt32LE(this.Requester['Type'], pos);
        pos += 4;
        buf.writeFloatLE(this.Requester['Range'], pos);
        pos += 4;
        buf.writeFloatLE(this.Requester['Arc'], pos);
        pos += 4;
        buf.writeInt32LE(this.Requester['RegionHandle'].low, pos);
        pos += 4;
        buf.writeInt32LE(this.Requester['RegionHandle'].high, pos);
        pos += 4;
        buf.writeUInt8(this.Requester['SearchRegions'], pos++);
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjRequester: {
            SourceID: UUID,
            RequestID: UUID,
            SearchID: UUID,
            SearchPos: Vector3,
            SearchDir: Quaternion,
            SearchName: Buffer,
            Type: number,
            Range: number,
            Arc: number,
            RegionHandle: Long,
            SearchRegions: number
        } = {
            SourceID: UUID.zero(),
            RequestID: UUID.zero(),
            SearchID: UUID.zero(),
            SearchPos: Vector3.getZero(),
            SearchDir: Quaternion.getIdentity(),
            SearchName: Buffer.allocUnsafe(0),
            Type: 0,
            Range: 0,
            Arc: 0,
            RegionHandle: Long.ZERO,
            SearchRegions: 0
        };
        newObjRequester['SourceID'] = new UUID(buf, pos);
        pos += 16;
        newObjRequester['RequestID'] = new UUID(buf, pos);
        pos += 16;
        newObjRequester['SearchID'] = new UUID(buf, pos);
        pos += 16;
        newObjRequester['SearchPos'] = new Vector3(buf, pos, false);
        pos += 12;
        newObjRequester['SearchDir'] = new Quaternion(buf, pos);
        pos += 12;
        varLength = buf.readUInt8(pos++);
        newObjRequester['SearchName'] = buf.slice(pos, pos + varLength);
        pos += varLength;
        newObjRequester['Type'] = buf.readInt32LE(pos);
        pos += 4;
        newObjRequester['Range'] = buf.readFloatLE(pos);
        pos += 4;
        newObjRequester['Arc'] = buf.readFloatLE(pos);
        pos += 4;
        newObjRequester['RegionHandle'] = new Long(buf.readInt32LE(pos), buf.readInt32LE(pos+4));
        pos += 8;
        newObjRequester['SearchRegions'] = buf.readUInt8(pos++);
        this.Requester = newObjRequester;
        return pos - startPos;
    }
}

