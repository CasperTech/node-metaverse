// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class GroupRoleChangesMessage implements MessageBase
{
    name = 'GroupRoleChanges';
    messageFlags = MessageFlags.FrequencyLow;
    id = Message.GroupRoleChanges;

    AgentData: {
        AgentID: UUID;
        SessionID: UUID;
        GroupID: UUID;
    };
    RoleChange: {
        RoleID: UUID;
        MemberID: UUID;
        Change: number;
    }[];

    getSize(): number
    {
        return ((36) * this.RoleChange.length) + 49;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.AgentData['AgentID'].writeToBuffer(buf, pos);
        pos += 16;
        this.AgentData['SessionID'].writeToBuffer(buf, pos);
        pos += 16;
        this.AgentData['GroupID'].writeToBuffer(buf, pos);
        pos += 16;
        const count = this.RoleChange.length;
        buf.writeUInt8(this.RoleChange.length, pos++);
        for (let i = 0; i < count; i++)
        {
            this.RoleChange[i]['RoleID'].writeToBuffer(buf, pos);
            pos += 16;
            this.RoleChange[i]['MemberID'].writeToBuffer(buf, pos);
            pos += 16;
            buf.writeUInt32LE(this.RoleChange[i]['Change'], pos);
            pos += 4;
        }
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjAgentData: {
            AgentID: UUID,
            SessionID: UUID,
            GroupID: UUID
        } = {
            AgentID: UUID.zero(),
            SessionID: UUID.zero(),
            GroupID: UUID.zero()
        };
        newObjAgentData['AgentID'] = new UUID(buf, pos);
        pos += 16;
        newObjAgentData['SessionID'] = new UUID(buf, pos);
        pos += 16;
        newObjAgentData['GroupID'] = new UUID(buf, pos);
        pos += 16;
        this.AgentData = newObjAgentData;
        const count = buf.readUInt8(pos++);
        this.RoleChange = [];
        for (let i = 0; i < count; i++)
        {
            const newObjRoleChange: {
                RoleID: UUID,
                MemberID: UUID,
                Change: number
            } = {
                RoleID: UUID.zero(),
                MemberID: UUID.zero(),
                Change: 0
            };
            newObjRoleChange['RoleID'] = new UUID(buf, pos);
            pos += 16;
            newObjRoleChange['MemberID'] = new UUID(buf, pos);
            pos += 16;
            newObjRoleChange['Change'] = buf.readUInt32LE(pos);
            pos += 4;
            this.RoleChange.push(newObjRoleChange);
        }
        return pos - startPos;
    }
}

