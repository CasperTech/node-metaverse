// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class UpdateTaskInventoryMessage implements MessageBase
{
    name = 'UpdateTaskInventory';
    messageFlags = MessageFlags.Zerocoded | MessageFlags.FrequencyLow;
    id = Message.UpdateTaskInventory;

    AgentData: {
        AgentID: UUID;
        SessionID: UUID;
    };
    UpdateData: {
        LocalID: number;
        Key: number;
    };
    InventoryData: {
        ItemID: UUID;
        FolderID: UUID;
        CreatorID: UUID;
        OwnerID: UUID;
        GroupID: UUID;
        BaseMask: number;
        OwnerMask: number;
        GroupMask: number;
        EveryoneMask: number;
        NextOwnerMask: number;
        GroupOwned: boolean;
        TransactionID: UUID;
        Type: number;
        InvType: number;
        Flags: number;
        SaleType: number;
        SalePrice: number;
        Name: string;
        Description: string;
        CreationDate: number;
        CRC: number;
    };

    getSize(): number
    {
        return (this.InventoryData['Name'].length + 1 + this.InventoryData['Description'].length + 1) + 173;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.AgentData['AgentID'].writeToBuffer(buf, pos);
        pos += 16;
        this.AgentData['SessionID'].writeToBuffer(buf, pos);
        pos += 16;
        buf.writeUInt32LE(this.UpdateData['LocalID'], pos);
        pos += 4;
        buf.writeUInt8(this.UpdateData['Key'], pos++);
        this.InventoryData['ItemID'].writeToBuffer(buf, pos);
        pos += 16;
        this.InventoryData['FolderID'].writeToBuffer(buf, pos);
        pos += 16;
        this.InventoryData['CreatorID'].writeToBuffer(buf, pos);
        pos += 16;
        this.InventoryData['OwnerID'].writeToBuffer(buf, pos);
        pos += 16;
        this.InventoryData['GroupID'].writeToBuffer(buf, pos);
        pos += 16;
        buf.writeUInt32LE(this.InventoryData['BaseMask'], pos);
        pos += 4;
        buf.writeUInt32LE(this.InventoryData['OwnerMask'], pos);
        pos += 4;
        buf.writeUInt32LE(this.InventoryData['GroupMask'], pos);
        pos += 4;
        buf.writeUInt32LE(this.InventoryData['EveryoneMask'], pos);
        pos += 4;
        buf.writeUInt32LE(this.InventoryData['NextOwnerMask'], pos);
        pos += 4;
        buf.writeUInt8((this.InventoryData['GroupOwned']) ? 1 : 0, pos++);
        this.InventoryData['TransactionID'].writeToBuffer(buf, pos);
        pos += 16;
        buf.writeInt8(this.InventoryData['Type'], pos++);
        buf.writeInt8(this.InventoryData['InvType'], pos++);
        buf.writeUInt32LE(this.InventoryData['Flags'], pos);
        pos += 4;
        buf.writeUInt8(this.InventoryData['SaleType'], pos++);
        buf.writeInt32LE(this.InventoryData['SalePrice'], pos);
        pos += 4;
        buf.writeUInt8(this.InventoryData['Name'].length, pos++);
        buf.write(this.InventoryData['Name'], pos);
        pos += this.InventoryData['Name'].length;
        buf.writeUInt8(this.InventoryData['Description'].length, pos++);
        buf.write(this.InventoryData['Description'], pos);
        pos += this.InventoryData['Description'].length;
        buf.writeInt32LE(this.InventoryData['CreationDate'], pos);
        pos += 4;
        buf.writeUInt32LE(this.InventoryData['CRC'], pos);
        pos += 4;
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjAgentData: {
            AgentID: UUID,
            SessionID: UUID
        } = {
            AgentID: UUID.zero(),
            SessionID: UUID.zero()
        };
        newObjAgentData['AgentID'] = new UUID(buf, pos);
        pos += 16;
        newObjAgentData['SessionID'] = new UUID(buf, pos);
        pos += 16;
        this.AgentData = newObjAgentData;
        const newObjUpdateData: {
            LocalID: number,
            Key: number
        } = {
            LocalID: 0,
            Key: 0
        };
        newObjUpdateData['LocalID'] = buf.readUInt32LE(pos);
        pos += 4;
        newObjUpdateData['Key'] = buf.readUInt8(pos++);
        this.UpdateData = newObjUpdateData;
        const newObjInventoryData: {
            ItemID: UUID,
            FolderID: UUID,
            CreatorID: UUID,
            OwnerID: UUID,
            GroupID: UUID,
            BaseMask: number,
            OwnerMask: number,
            GroupMask: number,
            EveryoneMask: number,
            NextOwnerMask: number,
            GroupOwned: boolean,
            TransactionID: UUID,
            Type: number,
            InvType: number,
            Flags: number,
            SaleType: number,
            SalePrice: number,
            Name: string,
            Description: string,
            CreationDate: number,
            CRC: number
        } = {
            ItemID: UUID.zero(),
            FolderID: UUID.zero(),
            CreatorID: UUID.zero(),
            OwnerID: UUID.zero(),
            GroupID: UUID.zero(),
            BaseMask: 0,
            OwnerMask: 0,
            GroupMask: 0,
            EveryoneMask: 0,
            NextOwnerMask: 0,
            GroupOwned: false,
            TransactionID: UUID.zero(),
            Type: 0,
            InvType: 0,
            Flags: 0,
            SaleType: 0,
            SalePrice: 0,
            Name: '',
            Description: '',
            CreationDate: 0,
            CRC: 0
        };
        newObjInventoryData['ItemID'] = new UUID(buf, pos);
        pos += 16;
        newObjInventoryData['FolderID'] = new UUID(buf, pos);
        pos += 16;
        newObjInventoryData['CreatorID'] = new UUID(buf, pos);
        pos += 16;
        newObjInventoryData['OwnerID'] = new UUID(buf, pos);
        pos += 16;
        newObjInventoryData['GroupID'] = new UUID(buf, pos);
        pos += 16;
        newObjInventoryData['BaseMask'] = buf.readUInt32LE(pos);
        pos += 4;
        newObjInventoryData['OwnerMask'] = buf.readUInt32LE(pos);
        pos += 4;
        newObjInventoryData['GroupMask'] = buf.readUInt32LE(pos);
        pos += 4;
        newObjInventoryData['EveryoneMask'] = buf.readUInt32LE(pos);
        pos += 4;
        newObjInventoryData['NextOwnerMask'] = buf.readUInt32LE(pos);
        pos += 4;
        newObjInventoryData['GroupOwned'] = (buf.readUInt8(pos++) === 1);
        newObjInventoryData['TransactionID'] = new UUID(buf, pos);
        pos += 16;
        newObjInventoryData['Type'] = buf.readInt8(pos++);
        newObjInventoryData['InvType'] = buf.readInt8(pos++);
        newObjInventoryData['Flags'] = buf.readUInt32LE(pos);
        pos += 4;
        newObjInventoryData['SaleType'] = buf.readUInt8(pos++);
        newObjInventoryData['SalePrice'] = buf.readInt32LE(pos);
        pos += 4;
        varLength = buf.readUInt8(pos++);
        newObjInventoryData['Name'] = buf.toString('utf8', pos, pos + (varLength - 1));
        pos += varLength;
        varLength = buf.readUInt8(pos++);
        newObjInventoryData['Description'] = buf.toString('utf8', pos, pos + (varLength - 1));
        pos += varLength;
        newObjInventoryData['CreationDate'] = buf.readInt32LE(pos);
        pos += 4;
        newObjInventoryData['CRC'] = buf.readUInt32LE(pos);
        pos += 4;
        this.InventoryData = newObjInventoryData;
        return pos - startPos;
    }
}

