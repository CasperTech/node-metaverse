// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class RemoveNameValuePairMessage implements MessageBase
{
    name = 'RemoveNameValuePair';
    messageFlags = MessageFlags.Trusted | MessageFlags.FrequencyLow;
    id = Message.RemoveNameValuePair;

    TaskData: {
        ID: UUID;
    };
    NameValueData: {
        NVPair: string;
    }[];

    getSize(): number
    {
        return ((this.calculateVarVarSize(this.NameValueData, 'NVPair', 2)) * this.NameValueData.length) + 17;
    }

    calculateVarVarSize(block: object[], paramName: string, extraPerVar: number): number
    {
        let size = 0;
        block.forEach((bl: any) =>
        {
            size += bl[paramName].length + extraPerVar;
        });
        return size;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.TaskData['ID'].writeToBuffer(buf, pos);
        pos += 16;
        const count = this.NameValueData.length;
        buf.writeUInt8(this.NameValueData.length, pos++);
        for (let i = 0; i < count; i++)
        {
            buf.writeUInt16LE(this.NameValueData[i]['NVPair'].length, pos);
            pos += 2;
            buf.write(this.NameValueData[i]['NVPair'], pos);
            pos += this.NameValueData[i]['NVPair'].length;
        }
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjTaskData: {
            ID: UUID
        } = {
            ID: UUID.zero()
        };
        newObjTaskData['ID'] = new UUID(buf, pos);
        pos += 16;
        this.TaskData = newObjTaskData;
        const count = buf.readUInt8(pos++);
        this.NameValueData = [];
        for (let i = 0; i < count; i++)
        {
            const newObjNameValueData: {
                NVPair: string
            } = {
                NVPair: ''
            };
            varLength = buf.readUInt16LE(pos);
            pos += 2;
            newObjNameValueData['NVPair'] = buf.toString('utf8', pos, pos + (varLength - 1));
            pos += varLength;
            this.NameValueData.push(newObjNameValueData);
        }
        return pos - startPos;
    }
}

