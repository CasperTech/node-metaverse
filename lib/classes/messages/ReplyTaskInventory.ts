// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class ReplyTaskInventoryMessage implements MessageBase
{
    name = 'ReplyTaskInventory';
    messageFlags = MessageFlags.Trusted | MessageFlags.Zerocoded | MessageFlags.FrequencyLow;
    id = Message.ReplyTaskInventory;

    InventoryData: {
        TaskID: UUID;
        Serial: number;
        Filename: string;
    };

    getSize(): number
    {
        return (this.InventoryData['Filename'].length + 1) + 18;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.InventoryData['TaskID'].writeToBuffer(buf, pos);
        pos += 16;
        buf.writeInt16LE(this.InventoryData['Serial'], pos);
        pos += 2;
        buf.writeUInt8(this.InventoryData['Filename'].length, pos++);
        buf.write(this.InventoryData['Filename'], pos);
        pos += this.InventoryData['Filename'].length;
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjInventoryData: {
            TaskID: UUID,
            Serial: number,
            Filename: string
        } = {
            TaskID: UUID.zero(),
            Serial: 0,
            Filename: ''
        };
        newObjInventoryData['TaskID'] = new UUID(buf, pos);
        pos += 16;
        newObjInventoryData['Serial'] = buf.readInt16LE(pos);
        pos += 2;
        varLength = buf.readUInt8(pos++);
        newObjInventoryData['Filename'] = buf.toString('utf8', pos, pos + (varLength - 1));
        pos += varLength;
        this.InventoryData = newObjInventoryData;
        return pos - startPos;
    }
}

