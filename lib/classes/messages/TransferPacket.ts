// This file has been automatically generated by writeMessageClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {MessageBase} from '../MessageBase';
import {Message} from '../../enums/Message';

export class TransferPacketMessage implements MessageBase
{
    name = 'TransferPacket';
    messageFlags = MessageFlags.FrequencyHigh;
    id = Message.TransferPacket;

    TransferData: {
        TransferID: UUID;
        ChannelType: number;
        Packet: number;
        Status: number;
        Data: string;
    };

    getSize(): number
    {
        return (this.TransferData['Data'].length + 2) + 28;
    }

    writeToBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        this.TransferData['TransferID'].writeToBuffer(buf, pos);
        pos += 16;
        buf.writeInt32LE(this.TransferData['ChannelType'], pos);
        pos += 4;
        buf.writeInt32LE(this.TransferData['Packet'], pos);
        pos += 4;
        buf.writeInt32LE(this.TransferData['Status'], pos);
        pos += 4;
        buf.writeUInt16LE(this.TransferData['Data'].length, pos);
        pos += 2;
        buf.write(this.TransferData['Data'], pos);
        pos += this.TransferData['Data'].length;
        return pos - startPos;
    }

    readFromBuffer(buf: Buffer, pos: number): number
    {
        const startPos = pos;
        let varLength = 0;
        const newObjTransferData: {
            TransferID: UUID,
            ChannelType: number,
            Packet: number,
            Status: number,
            Data: string
        } = {
            TransferID: UUID.zero(),
            ChannelType: 0,
            Packet: 0,
            Status: 0,
            Data: ''
        };
        newObjTransferData['TransferID'] = new UUID(buf, pos);
        pos += 16;
        newObjTransferData['ChannelType'] = buf.readInt32LE(pos);
        pos += 4;
        newObjTransferData['Packet'] = buf.readInt32LE(pos);
        pos += 4;
        newObjTransferData['Status'] = buf.readInt32LE(pos);
        pos += 4;
        varLength = buf.readUInt16LE(pos);
        pos += 2;
        newObjTransferData['Data'] = buf.toString('utf8', pos, pos + (varLength - 1));
        pos += varLength;
        this.TransferData = newObjTransferData;
        return pos - startPos;
    }
}

