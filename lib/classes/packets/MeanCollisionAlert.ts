// This file has been automatically generated by writePacketClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {Packet} from '../Packet';

export class MeanCollisionAlertPacket implements Packet
{
    name = 'MeanCollisionAlert';
    flags = MessageFlags.Trusted | MessageFlags.Zerocoded | MessageFlags.FrequencyLow;
    id = 4294901896;

    MeanCollision: {
        Victim: UUID;
        Perp: UUID;
        Time: number;
        Mag: number;
        Type: number;
    }[];

    getSize(): number
    {
        return ((41) * this.MeanCollision.length) + 1;
    }

     writeToBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         const count = this.MeanCollision.length;
         buf.writeUInt8(this.MeanCollision.length, pos++);
         for (let i = 0; i < count; i++)
         {
             this.MeanCollision[i]['Victim'].writeToBuffer(buf, pos);
             pos += 16;
             this.MeanCollision[i]['Perp'].writeToBuffer(buf, pos);
             pos += 16;
             buf.writeUInt32LE(this.MeanCollision[i]['Time'], pos);
             pos += 4;
             buf.writeFloatLE(this.MeanCollision[i]['Mag'], pos);
             pos += 4;
             buf.writeUInt8(this.MeanCollision[i]['Type'], pos++);
         }
         return pos - startPos;
     }

     readFromBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         const count = buf.readUInt8(pos++);
         this.MeanCollision = [];
         for (let i = 0; i < count; i++)
         {
             const newObjMeanCollision: {
                 Victim: UUID,
                 Perp: UUID,
                 Time: number,
                 Mag: number,
                 Type: number
             } = {
                 Victim: UUID.zero(),
                 Perp: UUID.zero(),
                 Time: 0,
                 Mag: 0,
                 Type: 0
             };
             newObjMeanCollision['Victim'] = new UUID(buf, pos);
             pos += 16;
             newObjMeanCollision['Perp'] = new UUID(buf, pos);
             pos += 16;
             newObjMeanCollision['Time'] = buf.readUInt32LE(pos);
             pos += 4;
             newObjMeanCollision['Mag'] = buf.readFloatLE(pos);
             pos += 4;
             newObjMeanCollision['Type'] = buf.readUInt8(pos++);
             this.MeanCollision.push(newObjMeanCollision);
         }
         return pos - startPos;
     }
}

