// This file has been automatically generated by writePacketClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {Packet} from '../Packet';

export class AtomicPassObjectPacket implements Packet
{
    name = 'AtomicPassObject';
    flags = MessageFlags.Trusted | MessageFlags.FrequencyHigh;
    id = 28;

    TaskData: {
        TaskID: UUID;
        AttachmentNeedsSave: boolean;
    };

    getSize(): number
    {
        return 17;
    }

     writeToBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         this.TaskData['TaskID'].writeToBuffer(buf, pos);
         pos += 16;
         buf.writeUInt8((this.TaskData['AttachmentNeedsSave']) ? 1 : 0, pos++);
         return pos - startPos;
     }

     readFromBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         const newObjTaskData: {
             TaskID: UUID,
             AttachmentNeedsSave: boolean
         } = {
             TaskID: UUID.zero(),
             AttachmentNeedsSave: false
         };
         newObjTaskData['TaskID'] = new UUID(buf, pos);
         pos += 16;
         newObjTaskData['AttachmentNeedsSave'] = (buf.readUInt8(pos++) === 1);
         this.TaskData = newObjTaskData;
         return pos - startPos;
     }
}

