// This file has been automatically generated by writePacketClasses.js

import {UUID} from '../UUID';
import Long = require('long');
import {MessageFlags} from '../../enums/MessageFlags';
import {Packet} from '../Packet';

export class SimulatorSetMapPacket implements Packet
{
    name = 'SimulatorSetMap';
    flags = MessageFlags.Trusted | MessageFlags.FrequencyLow;
    id = 4294901766;

    MapData: {
        RegionHandle: Long;
        Type: number;
        MapImage: UUID;
    };

    getSize(): number
    {
        return 28;
    }

     writeToBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         buf.writeInt32LE(this.MapData['RegionHandle'].low, pos);
         pos += 4;
         buf.writeInt32LE(this.MapData['RegionHandle'].high, pos);
         pos += 4;
         buf.writeInt32LE(this.MapData['Type'], pos);
         pos += 4;
         this.MapData['MapImage'].writeToBuffer(buf, pos);
         pos += 16;
         return pos - startPos;
     }

     readFromBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         const newObjMapData: {
             RegionHandle: Long,
             Type: number,
             MapImage: UUID
         } = {
             RegionHandle: Long.ZERO,
             Type: 0,
             MapImage: UUID.zero()
         };
         newObjMapData['RegionHandle'] = new Long(buf.readInt32LE(pos), buf.readInt32LE(pos+4));
         pos += 8;
         newObjMapData['Type'] = buf.readInt32LE(pos);
         pos += 4;
         newObjMapData['MapImage'] = new UUID(buf, pos);
         pos += 16;
         this.MapData = newObjMapData;
         return pos - startPos;
     }
}

