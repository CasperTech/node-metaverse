// This file has been automatically generated by writePacketClasses.js

import {UUID} from '../UUID';
import {Vector3} from '../Vector3';
import Long = require('long');
import {Quaternion} from '../Quaternion';
import {MessageFlags} from '../../enums/MessageFlags';
import {Packet} from '../Packet';

export class ScriptSensorRequestPacket implements Packet
{
    name = 'ScriptSensorRequest';
    flags = MessageFlags.Trusted | MessageFlags.Zerocoded | MessageFlags.FrequencyLow;
    id = 4294902007;

    Requester: {
        SourceID: UUID;
        RequestID: UUID;
        SearchID: UUID;
        SearchPos: Vector3;
        SearchDir: Quaternion;
        SearchName: string;
        Type: number;
        Range: number;
        Arc: number;
        RegionHandle: Long;
        SearchRegions: number;
    };

    getSize(): number
    {
        return (this.Requester['SearchName'].length + 1) + 93;
    }

     writeToBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         this.Requester['SourceID'].writeToBuffer(buf, pos);
         pos += 16;
         this.Requester['RequestID'].writeToBuffer(buf, pos);
         pos += 16;
         this.Requester['SearchID'].writeToBuffer(buf, pos);
         pos += 16;
         this.Requester['SearchPos'].writeToBuffer(buf, pos, false);
         pos += 12;
         this.Requester['SearchDir'].writeToBuffer(buf, pos);
         pos += 12;
         buf.write(this.Requester['SearchName'], pos);
         pos += this.Requester['SearchName'].length;
         buf.writeInt32LE(this.Requester['Type'], pos);
         pos += 4;
         buf.writeFloatLE(this.Requester['Range'], pos);
         pos += 4;
         buf.writeFloatLE(this.Requester['Arc'], pos);
         pos += 4;
         buf.writeInt32LE(this.Requester['RegionHandle'].low, pos);
         pos += 4;
         buf.writeInt32LE(this.Requester['RegionHandle'].high, pos);
         pos += 4;
         buf.writeUInt8(this.Requester['SearchRegions'], pos++);
         return pos - startPos;
     }

     readFromBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         const newObjRequester: {
             SourceID: UUID,
             RequestID: UUID,
             SearchID: UUID,
             SearchPos: Vector3,
             SearchDir: Quaternion,
             SearchName: string,
             Type: number,
             Range: number,
             Arc: number,
             RegionHandle: Long,
             SearchRegions: number
         } = {
             SourceID: UUID.zero(),
             RequestID: UUID.zero(),
             SearchID: UUID.zero(),
             SearchPos: Vector3.getZero(),
             SearchDir: Quaternion.getIdentity(),
             SearchName: '',
             Type: 0,
             Range: 0,
             Arc: 0,
             RegionHandle: Long.ZERO,
             SearchRegions: 0
         };
         newObjRequester['SourceID'] = new UUID(buf, pos);
         pos += 16;
         newObjRequester['RequestID'] = new UUID(buf, pos);
         pos += 16;
         newObjRequester['SearchID'] = new UUID(buf, pos);
         pos += 16;
         newObjRequester['SearchPos'] = new Vector3(buf, pos, false);
         pos += 12;
         newObjRequester['SearchDir'] = new Quaternion(buf, pos);
         pos += 12;
         newObjRequester['SearchName'] = buf.toString('utf8', pos, length);
         pos += length;
         newObjRequester['Type'] = buf.readInt32LE(pos);
         pos += 4;
         newObjRequester['Range'] = buf.readFloatLE(pos);
         pos += 4;
         newObjRequester['Arc'] = buf.readFloatLE(pos);
         pos += 4;
         newObjRequester['RegionHandle'] = new Long(buf.readInt32LE(pos), buf.readInt32LE(pos+4));
         pos += 8;
         newObjRequester['SearchRegions'] = buf.readUInt8(pos++);
         this.Requester = newObjRequester;
         return pos - startPos;
     }
}

