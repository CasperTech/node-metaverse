// This file has been automatically generated by writePacketClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {Packet} from '../Packet';

export class AgentCachedTextureResponsePacket implements Packet
{
    name = 'AgentCachedTextureResponse';
    flags = MessageFlags.Trusted | MessageFlags.FrequencyLow;
    id = 4294902145;

    AgentData: {
        AgentID: UUID;
        SessionID: UUID;
        SerialNum: number;
    };
    WearableData: {
        TextureID: UUID;
        TextureIndex: number;
        HostName: string;
    }[];

    getSize(): number
    {
        return ((this.calculateVarVarSize(this.WearableData, 'HostName', 1) + 17) * this.WearableData.length) + 37;
    }

    calculateVarVarSize(block: object[], paramName: string, extraPerVar: number): number
    {
        let size = 0;
        block.forEach((bl: any) =>
        {
            size += bl[paramName].length + extraPerVar;
        });
        return size;
    }

     writeToBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         this.AgentData['AgentID'].writeToBuffer(buf, pos);
         pos += 16;
         this.AgentData['SessionID'].writeToBuffer(buf, pos);
         pos += 16;
         buf.writeInt32LE(this.AgentData['SerialNum'], pos);
         pos += 4;
         const count = this.WearableData.length;
         buf.writeUInt8(this.WearableData.length, pos++);
         for (let i = 0; i < count; i++)
         {
             this.WearableData[i]['TextureID'].writeToBuffer(buf, pos);
             pos += 16;
             buf.writeUInt8(this.WearableData[i]['TextureIndex'], pos++);
             buf.write(this.WearableData[i]['HostName'], pos);
             pos += this.WearableData[i]['HostName'].length;
         }
         return pos - startPos;
     }

     readFromBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         const newObjAgentData: {
             AgentID: UUID,
             SessionID: UUID,
             SerialNum: number
         } = {
             AgentID: UUID.zero(),
             SessionID: UUID.zero(),
             SerialNum: 0
         };
         newObjAgentData['AgentID'] = new UUID(buf, pos);
         pos += 16;
         newObjAgentData['SessionID'] = new UUID(buf, pos);
         pos += 16;
         newObjAgentData['SerialNum'] = buf.readInt32LE(pos);
         pos += 4;
         this.AgentData = newObjAgentData;
         const count = buf.readUInt8(pos++);
         this.WearableData = [];
         for (let i = 0; i < count; i++)
         {
             const newObjWearableData: {
                 TextureID: UUID,
                 TextureIndex: number,
                 HostName: string
             } = {
                 TextureID: UUID.zero(),
                 TextureIndex: 0,
                 HostName: ''
             };
             newObjWearableData['TextureID'] = new UUID(buf, pos);
             pos += 16;
             newObjWearableData['TextureIndex'] = buf.readUInt8(pos++);
             newObjWearableData['HostName'] = buf.toString('utf8', pos, length);
             pos += length;
             this.WearableData.push(newObjWearableData);
         }
         return pos - startPos;
     }
}

