// This file has been automatically generated by writePacketClasses.js

import Long = require('long');
import {MessageFlags} from '../../enums/MessageFlags';
import {Packet} from '../Packet';

export class ScriptDataReplyPacket implements Packet
{
    name = 'ScriptDataReply';
    flags = MessageFlags.Trusted | MessageFlags.FrequencyLow;
    id = 4294902098;

    DataBlock: {
        Hash: Long;
        Reply: string;
    }[];

    getSize(): number
    {
        return ((this.calculateVarVarSize(this.DataBlock, 'Reply', 2) + 8) * this.DataBlock.length) + 1;
    }

    calculateVarVarSize(block: object[], paramName: string, extraPerVar: number): number
    {
        let size = 0;
        block.forEach((bl: any) =>
        {
            size += bl[paramName].length + extraPerVar;
        });
        return size;
    }

     writeToBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         const count = this.DataBlock.length;
         buf.writeUInt8(this.DataBlock.length, pos++);
         for (let i = 0; i < count; i++)
         {
             buf.writeInt32LE(this.DataBlock[i]['Hash'].low, pos);
             pos += 4;
             buf.writeInt32LE(this.DataBlock[i]['Hash'].high, pos);
             pos += 4;
             buf.write(this.DataBlock[i]['Reply'], pos);
             pos += this.DataBlock[i]['Reply'].length;
         }
         return pos - startPos;
     }

     readFromBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         const count = buf.readUInt8(pos++);
         this.DataBlock = [];
         for (let i = 0; i < count; i++)
         {
             const newObjDataBlock: {
                 Hash: Long,
                 Reply: string
             } = {
                 Hash: Long.ZERO,
                 Reply: ''
             };
             newObjDataBlock['Hash'] = new Long(buf.readInt32LE(pos), buf.readInt32LE(pos+4));
             pos += 8;
             newObjDataBlock['Reply'] = buf.toString('utf8', pos, length);
             pos += length;
             this.DataBlock.push(newObjDataBlock);
         }
         return pos - startPos;
     }
}

