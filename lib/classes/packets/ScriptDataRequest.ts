// This file has been automatically generated by writePacketClasses.js

import Long = require('long');
import {MessageFlags} from '../../enums/MessageFlags';
import {Packet} from '../Packet';

export class ScriptDataRequestPacket implements Packet
{
    name = 'ScriptDataRequest';
    flags = MessageFlags.Trusted | MessageFlags.FrequencyLow;
    id = 4294902097;

    DataBlock: {
        Hash: Long;
        RequestType: number;
        Request: string;
    }[];

    getSize(): number
    {
        return ((this.calculateVarVarSize(this.DataBlock, 'Request', 2) + 9) * this.DataBlock.length) + 1;
    }

    calculateVarVarSize(block: object[], paramName: string, extraPerVar: number): number
    {
        let size = 0;
        block.forEach((bl: any) =>
        {
            size += bl[paramName].length + extraPerVar;
        });
        return size;
    }

     writeToBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         const count = this.DataBlock.length;
         buf.writeUInt8(this.DataBlock.length, pos++);
         for (let i = 0; i < count; i++)
         {
             buf.writeInt32LE(this.DataBlock[i]['Hash'].low, pos);
             pos += 4;
             buf.writeInt32LE(this.DataBlock[i]['Hash'].high, pos);
             pos += 4;
             buf.writeInt8(this.DataBlock[i]['RequestType'], pos++);
             buf.write(this.DataBlock[i]['Request'], pos);
             pos += this.DataBlock[i]['Request'].length;
         }
         return pos - startPos;
     }

     readFromBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         const count = buf.readUInt8(pos++);
         this.DataBlock = [];
         for (let i = 0; i < count; i++)
         {
             const newObjDataBlock: {
                 Hash: Long,
                 RequestType: number,
                 Request: string
             } = {
                 Hash: Long.ZERO,
                 RequestType: 0,
                 Request: ''
             };
             newObjDataBlock['Hash'] = new Long(buf.readInt32LE(pos), buf.readInt32LE(pos+4));
             pos += 8;
             newObjDataBlock['RequestType'] = buf.readInt8(pos++);
             newObjDataBlock['Request'] = buf.toString('utf8', pos, length);
             pos += length;
             this.DataBlock.push(newObjDataBlock);
         }
         return pos - startPos;
     }
}

