// This file has been automatically generated by writePacketClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {Packet} from '../Packet';

export class ActivateGesturesPacket implements Packet
{
    name = 'ActivateGestures';
    flags = MessageFlags.FrequencyLow;
    id = 4294902076;

    AgentData: {
        AgentID: UUID;
        SessionID: UUID;
        Flags: number;
    };
    Data: {
        ItemID: UUID;
        AssetID: UUID;
        GestureFlags: number;
    }[];

    getSize(): number
    {
        return ((36) * this.Data.length) + 37;
    }

     writeToBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         this.AgentData['AgentID'].writeToBuffer(buf, pos);
         pos += 16;
         this.AgentData['SessionID'].writeToBuffer(buf, pos);
         pos += 16;
         buf.writeUInt32LE(this.AgentData['Flags'], pos);
         pos += 4;
         const count = this.Data.length;
         buf.writeUInt8(this.Data.length, pos++);
         for (let i = 0; i < count; i++)
         {
             this.Data[i]['ItemID'].writeToBuffer(buf, pos);
             pos += 16;
             this.Data[i]['AssetID'].writeToBuffer(buf, pos);
             pos += 16;
             buf.writeUInt32LE(this.Data[i]['GestureFlags'], pos);
             pos += 4;
         }
         return pos - startPos;
     }

     readFromBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         const newObjAgentData: {
             AgentID: UUID,
             SessionID: UUID,
             Flags: number
         } = {
             AgentID: UUID.zero(),
             SessionID: UUID.zero(),
             Flags: 0
         };
         newObjAgentData['AgentID'] = new UUID(buf, pos);
         pos += 16;
         newObjAgentData['SessionID'] = new UUID(buf, pos);
         pos += 16;
         newObjAgentData['Flags'] = buf.readUInt32LE(pos);
         pos += 4;
         this.AgentData = newObjAgentData;
         const count = buf.readUInt8(pos++);
         this.Data = [];
         for (let i = 0; i < count; i++)
         {
             const newObjData: {
                 ItemID: UUID,
                 AssetID: UUID,
                 GestureFlags: number
             } = {
                 ItemID: UUID.zero(),
                 AssetID: UUID.zero(),
                 GestureFlags: 0
             };
             newObjData['ItemID'] = new UUID(buf, pos);
             pos += 16;
             newObjData['AssetID'] = new UUID(buf, pos);
             pos += 16;
             newObjData['GestureFlags'] = buf.readUInt32LE(pos);
             pos += 4;
             this.Data.push(newObjData);
         }
         return pos - startPos;
     }
}

