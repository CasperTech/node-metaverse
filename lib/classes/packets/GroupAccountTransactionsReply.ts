// This file has been automatically generated by writePacketClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {Packet} from '../Packet';

export class GroupAccountTransactionsReplyPacket implements Packet
{
    name = 'GroupAccountTransactionsReply';
    flags = MessageFlags.Trusted | MessageFlags.Zerocoded | MessageFlags.FrequencyLow;
    id = 4294902118;

    AgentData: {
        AgentID: UUID;
        GroupID: UUID;
    };
    MoneyData: {
        RequestID: UUID;
        IntervalDays: number;
        CurrentInterval: number;
        StartDate: string;
    };
    HistoryData: {
        Time: string;
        User: string;
        Type: number;
        Item: string;
        Amount: number;
    }[];

    getSize(): number
    {
        return (this.MoneyData['StartDate'].length + 1) + ((this.calculateVarVarSize(this.HistoryData, 'Time', 1) + this.calculateVarVarSize(this.HistoryData, 'User', 1) + this.calculateVarVarSize(this.HistoryData, 'Item', 1) + 8) * this.HistoryData.length) + 57;
    }

    calculateVarVarSize(block: object[], paramName: string, extraPerVar: number): number
    {
        let size = 0;
        block.forEach((bl: any) =>
        {
            size += bl[paramName].length + extraPerVar;
        });
        return size;
    }

     writeToBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         this.AgentData['AgentID'].writeToBuffer(buf, pos);
         pos += 16;
         this.AgentData['GroupID'].writeToBuffer(buf, pos);
         pos += 16;
         this.MoneyData['RequestID'].writeToBuffer(buf, pos);
         pos += 16;
         buf.writeInt32LE(this.MoneyData['IntervalDays'], pos);
         pos += 4;
         buf.writeInt32LE(this.MoneyData['CurrentInterval'], pos);
         pos += 4;
         buf.write(this.MoneyData['StartDate'], pos);
         pos += this.MoneyData['StartDate'].length;
         const count = this.HistoryData.length;
         buf.writeUInt8(this.HistoryData.length, pos++);
         for (let i = 0; i < count; i++)
         {
             buf.write(this.HistoryData[i]['Time'], pos);
             pos += this.HistoryData[i]['Time'].length;
             buf.write(this.HistoryData[i]['User'], pos);
             pos += this.HistoryData[i]['User'].length;
             buf.writeInt32LE(this.HistoryData[i]['Type'], pos);
             pos += 4;
             buf.write(this.HistoryData[i]['Item'], pos);
             pos += this.HistoryData[i]['Item'].length;
             buf.writeInt32LE(this.HistoryData[i]['Amount'], pos);
             pos += 4;
         }
         return pos - startPos;
     }

     readFromBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         const newObjAgentData: {
             AgentID: UUID,
             GroupID: UUID
         } = {
             AgentID: UUID.zero(),
             GroupID: UUID.zero()
         };
         newObjAgentData['AgentID'] = new UUID(buf, pos);
         pos += 16;
         newObjAgentData['GroupID'] = new UUID(buf, pos);
         pos += 16;
         this.AgentData = newObjAgentData;
         const newObjMoneyData: {
             RequestID: UUID,
             IntervalDays: number,
             CurrentInterval: number,
             StartDate: string
         } = {
             RequestID: UUID.zero(),
             IntervalDays: 0,
             CurrentInterval: 0,
             StartDate: ''
         };
         newObjMoneyData['RequestID'] = new UUID(buf, pos);
         pos += 16;
         newObjMoneyData['IntervalDays'] = buf.readInt32LE(pos);
         pos += 4;
         newObjMoneyData['CurrentInterval'] = buf.readInt32LE(pos);
         pos += 4;
         newObjMoneyData['StartDate'] = buf.toString('utf8', pos, length);
         pos += length;
         this.MoneyData = newObjMoneyData;
         const count = buf.readUInt8(pos++);
         this.HistoryData = [];
         for (let i = 0; i < count; i++)
         {
             const newObjHistoryData: {
                 Time: string,
                 User: string,
                 Type: number,
                 Item: string,
                 Amount: number
             } = {
                 Time: '',
                 User: '',
                 Type: 0,
                 Item: '',
                 Amount: 0
             };
             newObjHistoryData['Time'] = buf.toString('utf8', pos, length);
             pos += length;
             newObjHistoryData['User'] = buf.toString('utf8', pos, length);
             pos += length;
             newObjHistoryData['Type'] = buf.readInt32LE(pos);
             pos += 4;
             newObjHistoryData['Item'] = buf.toString('utf8', pos, length);
             pos += length;
             newObjHistoryData['Amount'] = buf.readInt32LE(pos);
             pos += 4;
             this.HistoryData.push(newObjHistoryData);
         }
         return pos - startPos;
     }
}

