// This file has been automatically generated by writePacketClasses.js

import {UUID} from '../UUID';
import {MessageFlags} from '../../enums/MessageFlags';
import {Packet} from '../Packet';

export class LogTextMessagePacket implements Packet
{
    name = 'LogTextMessage';
    flags = MessageFlags.Trusted | MessageFlags.Zerocoded | MessageFlags.FrequencyLow;
    id = 4294902151;

    DataBlock: {
        FromAgentId: UUID;
        ToAgentId: UUID;
        GlobalX: number;
        GlobalY: number;
        Time: number;
        Message: string;
    }[];

    getSize(): number
    {
        return ((this.calculateVarVarSize(this.DataBlock, 'Message', 2) + 52) * this.DataBlock.length) + 1;
    }

    calculateVarVarSize(block: object[], paramName: string, extraPerVar: number): number
    {
        let size = 0;
        block.forEach((bl: any) =>
        {
            size += bl[paramName].length + extraPerVar;
        });
        return size;
    }

     writeToBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         const count = this.DataBlock.length;
         buf.writeUInt8(this.DataBlock.length, pos++);
         for (let i = 0; i < count; i++)
         {
             this.DataBlock[i]['FromAgentId'].writeToBuffer(buf, pos);
             pos += 16;
             this.DataBlock[i]['ToAgentId'].writeToBuffer(buf, pos);
             pos += 16;
             buf.writeDoubleLE(this.DataBlock[i]['GlobalX'], pos);
             pos += 8;
             buf.writeDoubleLE(this.DataBlock[i]['GlobalY'], pos);
             pos += 8;
             buf.writeUInt32LE(this.DataBlock[i]['Time'], pos);
             pos += 4;
             buf.write(this.DataBlock[i]['Message'], pos);
             pos += this.DataBlock[i]['Message'].length;
         }
         return pos - startPos;
     }

     readFromBuffer(buf: Buffer, pos: number): number
     {
         const startPos = pos;
         const count = buf.readUInt8(pos++);
         this.DataBlock = [];
         for (let i = 0; i < count; i++)
         {
             const newObjDataBlock: {
                 FromAgentId: UUID,
                 ToAgentId: UUID,
                 GlobalX: number,
                 GlobalY: number,
                 Time: number,
                 Message: string
             } = {
                 FromAgentId: UUID.zero(),
                 ToAgentId: UUID.zero(),
                 GlobalX: 0,
                 GlobalY: 0,
                 Time: 0,
                 Message: ''
             };
             newObjDataBlock['FromAgentId'] = new UUID(buf, pos);
             pos += 16;
             newObjDataBlock['ToAgentId'] = new UUID(buf, pos);
             pos += 16;
             newObjDataBlock['GlobalX'] = buf.readDoubleLE(pos);
             pos += 8;
             newObjDataBlock['GlobalY'] = buf.readDoubleLE(pos);
             pos += 8;
             newObjDataBlock['Time'] = buf.readUInt32LE(pos);
             pos += 4;
             newObjDataBlock['Message'] = buf.toString('utf8', pos, length);
             pos += length;
             this.DataBlock.push(newObjDataBlock);
         }
         return pos - startPos;
     }
}

