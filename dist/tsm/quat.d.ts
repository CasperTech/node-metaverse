/// <reference path="common.d.ts" />
import { mat4 } from './mat4';
import { mat3 } from './mat3';
import { vec3 } from './vec3';
export declare class quat {
    static identity: quat;
    private values;
    static dot(q1: quat, q2: quat): number;
    static sum(q1: quat, q2: quat, dest?: quat | null): quat;
    static product(q1: quat, q2: quat, dest?: quat | null): quat;
    static cross(q1: quat, q2: quat, dest?: quat | null): quat;
    static shortMix(q1: quat, q2: quat, time: number, dest?: quat | null): quat;
    static mix(q1: quat, q2: quat, time: number, dest?: quat | null): quat;
    static fromAxis(axis: vec3, angle: number, dest?: quat | null): quat;
    x: number;
    y: number;
    z: number;
    w: number;
    xy: number[];
    xyz: number[];
    xyzw: number[];
    constructor(values?: number[] | null);
    at(index: number): number;
    reset(): void;
    copy(dest?: quat | null): quat;
    roll(): number;
    pitch(): number;
    yaw(): number;
    equals(vector: quat, threshold?: number): boolean;
    setIdentity(): quat;
    calculateW(): quat;
    inverse(): quat;
    conjugate(): quat;
    length(): number;
    normalize(dest?: quat | null): quat;
    add(other: quat): quat;
    multiply(other: quat): quat;
    multiplyVec3(vector: vec3, dest?: vec3 | null): vec3;
    toMat3(dest?: mat3 | null): mat3;
    toMat4(dest?: mat4 | null): mat4;
}
